// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test the API queries Check that you can query a model and an association: All companies 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Company 1",
    "users": Array [
      Object {
        "id": 5,
        "name": "Mr Test 5 c 2",
      },
      Object {
        "id": 10,
        "name": "Test 10 c 2",
      },
    ],
  },
  Object {
    "id": 3,
    "name": "Company 3",
    "users": Array [],
  },
  Object {
    "id": 5,
    "name": "Company 5",
    "users": Array [],
  },
  Object {
    "id": 7,
    "name": "Company 7",
    "users": Array [],
  },
]
`;

exports[`Test the API queries Check that you can query sub associations: All companies with users and their department 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Company 1",
    "users": Array [
      Object {
        "department": Object {
          "id": 1,
        },
        "id": 5,
        "name": "Mr Test 5 c 2",
      },
      Object {
        "department": Object {
          "id": 1,
        },
        "id": 10,
        "name": "Test 10 c 2",
      },
    ],
  },
  Object {
    "id": 3,
    "name": "Company 3",
    "users": Array [],
  },
  Object {
    "id": 5,
    "name": "Company 5",
    "users": Array [],
  },
  Object {
    "id": 7,
    "name": "Company 7",
    "users": Array [],
  },
]
`;

exports[`Test the API queries Check that you can sort by virtual fields in any order: All companies sorted by userCount desc and name asc. 1`] = `
Array [
  Object {
    "id": 7,
    "name": "Company 7",
    "userCount": 70,
  },
  Object {
    "id": 5,
    "name": "Company 5",
    "userCount": 50,
  },
  Object {
    "id": 3,
    "name": "Company 3",
    "userCount": 30,
  },
  Object {
    "id": 1,
    "name": "Company 1",
    "userCount": 10,
  },
]
`;

exports[`Test the API queries Check that you can sort: All companies sorted by name 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Company 1",
  },
  Object {
    "id": 3,
    "name": "Company 3",
  },
  Object {
    "id": 5,
    "name": "Company 5",
  },
  Object {
    "id": 7,
    "name": "Company 7",
  },
]
`;

exports[`Test the API queries Limit can be enforced.: Limit and offset optimization works with multi primary key tables. 1`] = `
Object {
  "userLocations": Array [
    Object {
      "locationId": 2,
      "userId": "1",
    },
    Object {
      "locationId": 2,
      "userId": "2",
    },
    Object {
      "locationId": 2,
      "userId": "3",
    },
    Object {
      "locationId": 2,
      "userId": "4",
    },
    Object {
      "locationId": 2,
      "userId": "5",
    },
    Object {
      "locationId": 2,
      "userId": "6",
    },
    Object {
      "locationId": 2,
      "userId": "7",
    },
    Object {
      "locationId": 2,
      "userId": "8",
    },
    Object {
      "locationId": 2,
      "userId": "9",
    },
    Object {
      "locationId": 2,
      "userId": "10",
    },
  ],
}
`;

exports[`Test the API queries One can exclude a basic field from a model 1`] = `
Array [
  Object {
    "extensions": Object {
      "code": "GRAPHQL_VALIDATION_FAILED",
    },
    "locations": Array [
      Object {
        "column": 15,
        "line": 6,
      },
    ],
    "message": "Cannot query field \\"updatedAt\\" on type \\"department\\". Did you mean \\"createdAt\\"?",
  },
]
`;

exports[`Test the API queries One can exclude a model from the root of the server. 1`] = `
Array [
  Object {
    "extensions": Object {
      "code": "GRAPHQL_VALIDATION_FAILED",
    },
    "locations": Array [
      Object {
        "column": 13,
        "line": 3,
      },
    ],
    "message": "Cannot query field \\"companySetting\\" on type \\"Root_Query\\". Did you mean \\"companyType\\"?",
  },
]
`;

exports[`Test the API queries One can exclude a model from the root of the server. 2`] = `
Object {
  "company": Array [
    Object {
      "id": 1,
      "settings": Object {
        "whiteLabelEnabled": true,
      },
    },
    Object {
      "id": 3,
      "settings": null,
    },
    Object {
      "id": 5,
      "settings": null,
    },
    Object {
      "id": 7,
      "settings": null,
    },
  ],
}
`;

exports[`Test the API queries One can exclude an associated model 1`] = `
Array [
  Object {
    "extensions": Object {
      "code": "GRAPHQL_VALIDATION_FAILED",
    },
    "locations": Array [
      Object {
        "column": 15,
        "line": 6,
      },
    ],
    "message": "Cannot query field \\"company\\" on type \\"department\\". Did you mean \\"companyId\\"?",
  },
]
`;

exports[`Test the API queries Sorting can ignore spacing typoes: All companies sorted by userCount desc and name asc. 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Company 1",
    "userCount": 10,
  },
  Object {
    "id": 3,
    "name": "Company 3",
    "userCount": 30,
  },
  Object {
    "id": 5,
    "name": "Company 5",
    "userCount": 50,
  },
  Object {
    "id": 7,
    "name": "Company 7",
    "userCount": 70,
  },
]
`;

exports[`Test the API queries Sorting work on secondary field and associated fields: All companies sorted by userCount desc and name asc. 1`] = `
Array [
  Object {
    "id": 5,
    "name": "Company 5",
    "type": null,
    "userCount": 50,
  },
  Object {
    "id": 1,
    "name": "Company 1",
    "type": null,
    "userCount": 10,
  },
  Object {
    "id": 7,
    "name": "Company 7",
    "type": Object {
      "id": 2,
    },
    "userCount": 70,
  },
  Object {
    "id": 3,
    "name": "Company 3",
    "type": Object {
      "id": 2,
    },
    "userCount": 30,
  },
]
`;
